{
  "openapi": "3.0.2",
  "info": {
    "title": "Swagger Petstore - OpenAPI 3.0",
    "description": "\nThis is a sample Pet Store Server based on the OpenAPI 3.0 specification. \nYou can find out more about\n\nSwagger at [http://swagger.io](http://swagger.io). In the third iteration of\nthe pet store, we've switched to the design first approach!\n\nYou can now help us improve the API whether it's by making changes to the\ndefinition itself or to the code.\n\nThat way, with time, we can improve the API in general, and expose some of\nthe new features in OAS3.\n\n\nSome useful links:\n\n- [The Pet Store\nrepository](https://github.com/swagger-api/swagger-petstore)\n\n- [The source API definition for the Pet\nStore](https://github.com/swagger-api/swagger-petstore/blob/master/src/main/resources/openapi.yaml)",
    "termsOfService": "http://swagger.io/terms/",
    "version": "1.0.6-SNAPSHOT",
    "contact": {
      "email": "apiteam@swagger.io"
    },
    "license": {
      "name": "Apache 2.0",
      "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
  },
  "servers": [
    {
      "url": "/v3"
    }
  ],
  "tags": [
    {
      "name": "pet",
      "description": "Everything about your Pets"
    },
    {
      "name": "store",
      "description": "Operations about user"
    },
    {
      "name": "user",
      "description": "Access to Petstore orders"
    }
  ],
  "paths": {
    "/pet": {
      "put": {
        "tags": [
          "pet"
        ],
        "summary": "Update an existing pet",
        "operationId": "updatePet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "-",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Invalid ID supplied",
                  "example": ""
                }
              }
            }
          },
          "404": {
            "description": "Pet not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Pet not found",
                  "example": ""
                }
              }
            }
          },
          "405": {
            "description": "Validation exception",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Validation exception",
                  "example": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Add a new pet to store",
        "operationId": "addPet",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Pet"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "-",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/pet/findByStatus": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by status",
        "operationId": "findPetsByStatus",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "default": "available",
              "example": "available",
              "enum": [
                "available",
                "pending",
                "sold"
              ]
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "-",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/pet/findByTags": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Finds Pets by tags",
        "operationId": "findPetsByTags",
        "parameters": [
          {
            "name": "status",
            "in": "query",
            "schema": {
              "items": {
                "type": "string",
                "example": "Dog"
              }
            },
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "-",
            "content": {
              "application/json": {
                "schema": {
                  "items": {
                    "$ref": "#/components/schemas/Pet"
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/pet/{petId}": {
      "get": {
        "tags": [
          "pet"
        ],
        "summary": "Find pet by ID",
        "operationId": "getPetById",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 3
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "-",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Pet"
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": [],
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Updates a pet in the store with form data",
        "operationId": "updatePetWithForm",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 3
            },
            "required": true
          },
          {
            "name": "name",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "Jam"
            },
            "required": true
          },
          {
            "name": "status",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "sold"
            },
            "required": true
          }
        ],
        "responses": {
          "405": {
            "description": "Invalid input",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Invalid input",
                  "example": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      },
      "delete": {
        "tags": [
          "pet"
        ],
        "summary": "Deletes a pet",
        "operationId": "deletePet",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 3
            },
            "required": true
          },
          {
            "name": "api_key",
            "in": "header",
            "schema": {
              "type": "string",
              "example": ""
            },
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid pet value",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Invalid pet value",
                  "example": ""
                }
              }
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/pet/{petId}/uploadImage": {
      "post": {
        "tags": [
          "pet"
        ],
        "summary": "Uploads an pet image",
        "operationId": "uploadPetImage",
        "parameters": [
          {
            "name": "petId",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 3
            },
            "required": true
          },
          {
            "name": "additionalMetadata",
            "in": "query",
            "schema": {
              "type": "string",
              "example": ""
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/octet-stream": {
              "schema": {
                "type": "string",
                "format": "binary",
                "example": ""
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "-",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponse"
                }
              }
            }
          }
        },
        "security": [
          {
            "petstore_auth": [
              "write:pets",
              "read:pets"
            ]
          }
        ]
      }
    },
    "/store/inventory": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Returns pet inventories by status",
        "operationId": "getInventory",
        "x-swagger-router-controller": "OrderController",
        "responses": {
          "200": {
            "description": "-",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "additionalProperties": {
                      "type": "integer",
                      "format": "int64",
                      "example": 0
                    }
                  },
                  "required": [
                    "additionalProperties"
                  ]
                }
              }
            }
          }
        },
        "security": [
          {
            "api_key": []
          }
        ]
      }
    },
    "/store/order": {
      "post": {
        "tags": [
          "store"
        ],
        "summary": "Returns pet inventories by status",
        "operationId": "placeOrder",
        "x-swagger-router-controller": "OrderController",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/Order"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "-",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/Order"
                }
              }
            }
          }
        }
      }
    },
    "/store/order/{orderId}": {
      "get": {
        "tags": [
          "store"
        ],
        "summary": "Find purchase order by ID",
        "operationId": "getOrderById",
        "x-swagger-router-controller": "OrderController",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 13
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "-",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/order"
                }
              }
            }
          },
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Invalid ID supplied",
                  "example": ""
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Order not found",
                  "example": ""
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "store"
        ],
        "summary": "Delete purchase order by ID",
        "operationId": "deleteOrder",
        "x-swagger-router-controller": "OrderController",
        "parameters": [
          {
            "name": "orderId",
            "in": "path",
            "schema": {
              "type": "integer",
              "format": "int64",
              "example": 13
            },
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid ID supplied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Invalid ID supplied",
                  "example": ""
                }
              }
            }
          },
          "404": {
            "description": "Order not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Order not found",
                  "example": ""
                }
              }
            }
          }
        }
      }
    },
    "/user": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "operationId": "createUser",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/User"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "-",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/user/createWithList": {
      "post": {
        "tags": [
          "user"
        ],
        "summary": "Create user",
        "operationId": "createUsersWithListInput",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "items": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "-",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/User"
                }
              }
            }
          }
        }
      }
    },
    "/user/login": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs user into the system",
        "operationId": "loginUser",
        "parameters": [
          {
            "name": "username",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "Jonh"
            },
            "required": true
          },
          {
            "name": "password",
            "in": "query",
            "schema": {
              "type": "string",
              "example": "12345"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "-",
            "headers": {
              "X-Rate-Limit": {
                "description": "calls per hour allowed by the user",
                "schema": {
                  "type": "integer",
                  "format": "int64",
                  "description": "calls per hour allowed by the user",
                  "example": 10
                },
                "required": true
              },
              "X-Expires-After": {
                "description": "date in UTC when toekn expires",
                "schema": {
                  "type": "string",
                  "format": "date-time",
                  "description": "date in UTC when toekn expires",
                  "example": "<datetime"
                },
                "required": true
              }
            },
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": ""
                }
              }
            }
          }
        }
      }
    },
    "/user/logout": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Logs out current logged in user session",
        "operationId": "logoutUser",
        "responses": {
          "200": {
            "description": "-",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": ""
                }
              }
            }
          }
        }
      }
    },
    "/user/{username}": {
      "get": {
        "tags": [
          "user"
        ],
        "summary": "Get user by user name",
        "operationId": "getUserByName",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "Jonh"
            },
            "required": true
          }
        ],
        "responses": {
          "200": {
            "description": "-",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object"
                }
              }
            }
          }
        }
      },
      "put": {
        "tags": [
          "user"
        ],
        "summary": "Update user",
        "operationId": "updateUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "Jonh"
            },
            "required": true
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "description": "-",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "example": ""
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "user"
        ],
        "summary": "Delete user",
        "operationId": "deleteUser",
        "parameters": [
          {
            "name": "username",
            "in": "path",
            "schema": {
              "type": "string",
              "example": "Jonh"
            },
            "required": true
          }
        ],
        "responses": {
          "400": {
            "description": "Invalid username supplied",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "Invalid username supplied",
                  "example": ""
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "string",
                  "description": "User not found",
                  "example": ""
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 1
          },
          "name": {
            "type": "string",
            "example": "Dogs"
          }
        },
        "required": [
          "id",
          "name"
        ]
      },
      "Tag": {
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "integer",
              "format": "int64",
              "example": 1
            },
            "name": {
              "type": "string",
              "example": "dog"
            }
          },
          "required": [
            "id",
            "name"
          ]
        }
      },
      "Pet": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "name": {
            "type": "string",
            "example": "doggie"
          },
          "category": {
            "$ref": "#/components/schemas/Category"
          },
          "photoUrls": {
            "items": {
              "type": "string",
              "example": "<url:img>"
            }
          },
          "tags": {
            "$ref": "#/components/schemas/Tag"
          },
          "status": {
            "type": "string",
            "example": "available",
            "enum": [
              "available",
              "pending",
              "sold"
            ]
          }
        },
        "required": [
          "id",
          "name",
          "category",
          "photoUrls",
          "tags",
          "status"
        ]
      },
      "ApiResponse": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int64",
            "example": 0
          },
          "message": {
            "type": "string",
            "example": "OK"
          }
        },
        "required": [
          "code",
          "message"
        ]
      },
      "Order": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "petId": {
            "type": "integer",
            "format": "int64",
            "example": 198772
          },
          "quantity": {
            "type": "integer",
            "format": "int64",
            "example": 7
          },
          "shipDate": {
            "type": "string",
            "example": "2020-10-30T08:24:17.882Z"
          },
          "status": {
            "type": "string",
            "example": "approved"
          },
          "complete": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "id",
          "petId",
          "quantity",
          "shipDate",
          "status",
          "complete"
        ]
      },
      "User": {
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "format": "int64",
            "example": 10
          },
          "username": {
            "type": "string",
            "example": "theUser"
          },
          "firstName": {
            "type": "string",
            "example": "John"
          },
          "lastName": {
            "type": "string",
            "example": "James"
          },
          "email": {
            "type": "string",
            "example": "john@email.com"
          },
          "password": {
            "type": "string",
            "example": "12345"
          },
          "phone": {
            "type": "string",
            "example": "12345"
          },
          "userStatus": {
            "type": "integer",
            "format": "int64",
            "example": 1
          }
        },
        "required": [
          "id",
          "username",
          "firstName",
          "lastName",
          "email",
          "password",
          "phone",
          "userStatus"
        ]
      }
    },
    "securitySchemes": {
      "api_key": {
        "type": "apiKey",
        "name": "api_key",
        "in": "header"
      },
      "petstore_auth": {
        "type": "oauth2",
        "flows": {
          "implicit": {
            "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
            "scopes": {
              "read:pets": "read your pets",
              "write:pets": "modify pets in your account"
            }
          }
        }
      }
    }
  }
}